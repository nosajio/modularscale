//
//  _ms.scss
//
//  Copyright (c) 07/01/2018 Jason Howmans 
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//  
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
//  
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
//  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
//  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
//  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
//  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
//  OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
//  OR OTHER DEALINGS IN THE SOFTWARE.
//

$ms-scale: 1.333 !default; // Perfect fourth (http://www.modularscale.com/?1&em&1.333&web&text)
$ms-px:    16px !default;

// Step along the modular scale.
// Both positive and negative numbers will work. 
// Example: ms(1) ms(-10) ms(10) etc
@function ms($exponent) {
  $value: 1;
  @if $exponent > 0 {
    @for $i from 1 through $exponent {
      $value: $value * $ms-scale;
    }
  } @else {
    @for $i from 1 through ($exponent * -1) {
      $value: $value / $ms-scale;
    }
  }
  @return $value;
}

// Output a rem value based on the exponent.
@function msrem($exponent) {
  $val: ms($exponent);
  @return #{$val}rem;
}

// Output a pixel value for the exponent. 
// The pixel value base can be changed by overriding the $ms-px variable. 
@function mspx($exponent, $base: $ms-px) {
  $val: ms($exponent) * $base;
  @return round($val);
}
